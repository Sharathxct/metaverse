// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @unique @default(cuid())
  username String  @unique
  password String
  avatar   Avatar? @relation(fields: [avatarId], references: [id])
  avatarId String?
  role     Role
  spaces   Space[]
}

model Space {
  id        String         @id @unique @default(cuid())
  name      String
  width     Int
  height    Int?
  thumbnail String?
  elements  SpaceElement[]
  userId    String
  user      User           @relation(fields: [userId], references: [id])
}

model SpaceElement {
  id        String  @id @unique @default(cuid())
  element   Element @relation(fields: [elementId], references: [id])
  elementId String
  space     Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId   String
  x         Int
  y         Int
}

model Element {
  id            String         @id @unique @default(cuid())
  width         Int
  height        Int
  imageUrl      String
  static        Boolean
  spaceElements SpaceElement[]
  mapElements   MapElement[]
}

model Map {
  id        String       @id @unique @default(cuid())
  width     Int
  height    Int
  thumbnail String
  name      String?
  element   MapElement[]
}

model MapElement {
  id        String  @id @unique @default(cuid())
  map       Map     @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId     String
  element   Element @relation(fields: [elementId], references: [id])
  elementId String
  x         Int?
  y         Int?
}

model Avatar {
  id       String  @id @unique @default(cuid())
  imageUrl String?
  name     String?
  users    User[]
}

enum Role {
  admin
  user
}
